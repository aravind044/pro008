// Define sensor pins
#define TRIG_PIN_FRONT 8
#define ECHO_PIN_FRONT 9
#define TRIG_PIN_BACK 10
#define ECHO_PIN_BACK 11

// Motor driver pins
#define IN1 2
#define IN2 3
#define IN3 4
#define IN4 5

// Constants for distance
#define DISTANCE_THRESHOLD_FOLLOW 20  // in cm
#define DISTANCE_THRESHOLD_STOP 10  // in cm

void setup() {
  // Sensor pins
  pinMode(TRIG_PIN_FRONT, OUTPUT);
  pinMode(ECHO_PIN_FRONT, INPUT);
  pinMode(TRIG_PIN_BACK, OUTPUT);
  pinMode(ECHO_PIN_BACK, INPUT);

  // Motor pins
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  Serial.begin(9600);
}

// Function to measure distance from ultrasonic sensor
long measureDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  long duration = pulseIn(echoPin, HIGH);
  long distance = duration * 0.034 / 2;
  return distance;
}

// Function to move the robot forward
void moveForward() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

// Function to stop the robot
void stopRobot() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}

// Function to move the robot backward
void moveBackward() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
}

void loop() {
  // Measure front distance
  long distanceFront = measureDistance(TRIG_PIN_FRONT, ECHO_PIN_FRONT);
  long distanceBack = measureDistance(TRIG_PIN_BACK, ECHO_PIN_BACK);

  // Display distances for debugging
  Serial.print("Front Distance: ");
  Serial.println(distanceFront);
  Serial.print("Back Distance: ");
  Serial.println(distanceBack);

  // Control logic for following the human
  if (distanceFront > DISTANCE_THRESHOLD_FOLLOW) {
    // Move forward if the object is far
    moveForward();
  } else if (distanceFront <= DISTANCE_THRESHOLD_FOLLOW && distanceFront > DISTANCE_THRESHOLD_STOP) {
    // Stop when the human is within a comfortable range
    stopRobot();
  } else if (distanceFront <= DISTANCE_THRESHOLD_STOP) {
    // If too close, move backward
    moveBackward();
  }

  delay(100);  // Small delay for stability
}
